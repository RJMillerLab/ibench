<project 
	name="iBench" 
	default="Deploy" 
	basedir="."
	xmlns:ivy="antlib:org.apache.ivy.ant"
	>
	<description>
iBench is a flexible metadata generator.
	</description>


	<!-- Properties -->
	<property name="binarydir" location="${basedir}/bin" />
	<property name="builddir" location="${basedir}/build" />
	<property name="buildresdir" location="${basedir}/buildResources" />
	<property name="docdir" location="${basedir}/doc" />
	<property name="librarydir" location="${basedir}/lib" />
	<property name="resourcedir" location="${basedir}/resource" />
	<property name="examplescendir" location="${basedir}/exampleScenarios" />
<!--	<property name="exampledatadir" location="${basedir}/exampleData" /> -->
	<property name="sourcedir" location="${basedir}/src" />
   	<property name="binmacdir" location="${builddir}/mac" />
  	<property name="binwindir" location="${builddir}/win"/>
	<property name="binexpdriverdir" location="${builddir}/expdriver"/>
	
	<!-- Ivy -->
    <property name="ivy.install.version" value="2.1.0" />
    <condition property="ivy.home" value="${env.IVY_HOME}">
      <isset property="env.IVY_HOME" />
    </condition>
    <property name="ivy.jar.dir" value="${librarydir}" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
		
	<property name="schema" location="resource/xmlschema/mappingScenario.xsd" />
  	<property name="mainClass" value="tresc.benchmark.iBench" />
  	<property name="expMainClass" value="tresc.benchmark.iBenchDriver" />



	<property name="fullJarClasspath" value="${jarClasspath}   resource/    lib/" />

	<!-- targets -->
	<!-- Ivy -->
    <target name="download-ivy" unless="offline">

        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" 
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
      <!-- try to load ivy here from ivy home, in case the user has not already dropped
              it into ant's lib dir (note that the latter copy will always take precedence).
              We will not fail as long as local lib dir exists (it may be empty) and
              ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>
	
	<target name="download-dependencies" depends="init-ivy">
		 <ivy:resolve />
		 <ivy:retrieve sync="false" type="jar" pattern="${librarydir}/[artifact].[ext]" />
	</target>
	
	<!-- Internal Taskdefs -->
	<target name="setup-additional-anttasks" depends="download-dependencies">
		<taskdef resource="net/sf/antcontrib/antcontrib.properties">
			<classpath>
				<pathelement location="${librarydir}/ant-contrib.jar"/>
			</classpath>
		</taskdef>
	</target>
	
	<target name="Clean" depends="setup-additional-anttasks">
		<delete includeemptydirs="true">
			<fileset dir="${binarydir}" includes="**/*"/>
		</delete>
		<mkdir dir="${binarydir}" />
		<mkdir dir="${builddir}" />
		<!-- ClassPath Setup -->
		<path id="libraries">
			<fileset dir="${librarydir}"/>
		</path>

		<pathconvert property="jarClasspath" pathsep="    ">
			<path>
				<fileset dir="${librarydir}">
					<exclude name="ant*.jar" />
				</fileset>
			</path>
			<mapper>
				<chainedmapper>
					<flattenmapper/>
					<globmapper from="*.jar" to="lib/*.jar" casesensitive="no"/>
				</chainedmapper>
			</mapper>
		</pathconvert>
		<echo message="${jarClasspath}"/>
	</target>
	
	<target name="Compile" depends="Clean">
		<javac srcdir="${sourcedir}" destdir="${binarydir}" 
			classpathref="libraries" debug="on" includeantruntime="false">
			<compilerarg value="-Xlint:unchecked" />
		</javac>
	</target>

	<target name="Deploy" depends="Jar">
		<var name="deployto" value="${builddir}" />
		<antcall target="DeployOne" />
		<copy todir="${builddir}" file="${buildresdir}/iBench.sh" />
		<copy todir="${builddir}" file="${buildresdir}/iBench.bat" /> 
		<copy todir="${builddir}" file="${buildresdir}/configGen.bat" />
		<copy todir="${builddir}" file="${buildresdir}/configGen.sh" />
	<!--	<var name="deployto" value="${binmacdir}" />
    	<antcall target="DeployOne" />
    	<copy todir="${binmacdir}" file="${buildresdir}/iBench.sh" />
    	
		<var name="deployto" value="${binwindir}" />
		<antcall target="DeployOne" />
    	<copy todir="${binwindir}" file="${buildresdir}/iBench.bat" /> -->
	</target>

	<target name="DeployOne">
		<!--		<mkdir dir="${deployto}/lib"/>
		<copy todir="${deployto}/lib">
			<fileset dir="${librarydir}">
				<exclude name=".svn"/>
			</fileset>
		</copy>
		<copy tofile="${deployto}/toxgene.jar" file="${librarydir}/toxgene.jar" /> -->
		<mkdir dir="${deployto}/exampleScenarios" />
		<copy todir="${deployto}/exampleScenarios">
			<fileset dir="${examplescendir}">
				<exclude name=".svn"/>
			</fileset>
		</copy> 
		<mkdir dir="${deployto}/resource"/>
		<copy todir="${deployto}/resource">
			<fileset dir="${resourcedir}">
				<exclude name=".svn"/>
				<exclude name="test/**"/>
				<exclude name="log4jproperties.txt"/>
			</fileset>
		</copy>
		<copy todir="${deployto}/resource" 
			file="${buildresdir}/log4jproperties.txt"/>
	</target>

	<target name="Jar" depends="Compile">
		 <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask"
		        classpath="${librarydir}/jarjar.jar"/>
		<mkdir dir="${builddir}"/>
		<jarjar destfile="${builddir}/iBench.jar" basedir="${binarydir}">
			<manifest>
				<attribute name="Main-Class" value="${mainClass}" />
				<attribute name="Created-By" value="University of Toronto" />
				<attribute name="Class-Path" value="${fullJarClasspath}" />
			</manifest>
			<zipfileset src="${librarydir}/log4j.jar"/>
			<zipfileset src="${librarydir}/args4j.jar"/>
			<zipfileset src="${librarydir}/junit.jar"/>
			<zipfileset src="${librarydir}/toxgene.jar"/>
			<zipfileset src="${librarydir}/trampexgen.jar"/>
			<zipfileset src="${librarydir}/xercesImpl.jar"/>
			<zipfileset src="${librarydir}/xml-apis.jar"/>
			<zipfileset src="${librarydir}/xml-resolver.jar"/>
			<zipfileset src="${librarydir}/xmlbeans.jar"/>
		</jarjar>
    	<echo message="${jarClasspath}" />
		<jarjar destfile="${builddir}/confFileGenerator.jar" basedir="${binarydir}">
			<manifest>
				<attribute name="Main-Class" value="${expMainClass}" />
				<attribute name="Created-By" value="University of Toronto" />
				<attribute name="Class-Path" value="${fullJarClasspath}" />
			</manifest>
			<zipfileset src="${librarydir}/log4j.jar"/>
			<zipfileset src="${librarydir}/args4j.jar"/>
			<zipfileset src="${librarydir}/junit.jar"/>
			<zipfileset src="${librarydir}/toxgene.jar"/>
			<zipfileset src="${librarydir}/trampexgen.jar"/>
			<zipfileset src="${librarydir}/xercesImpl.jar"/>
			<zipfileset src="${librarydir}/xml-apis.jar"/>
			<zipfileset src="${librarydir}/xml-resolver.jar"/>
			<zipfileset src="${librarydir}/xmlbeans.jar"/>
		</jarjar>
	</target>

	
	<target name="GenerateJavaDoc">
		<javadoc access="private" 
			author="true" 
			classpathref="libraries" 
			destdir="${docdir}" 
			nodeprecated="false" 
			nodeprecatedlist="false"
			noindex="false" 
			nonavbar="false" 
			notree="false" 
			packagenames="tresc" 
			source="1.5" 
			sourcepath="${sourcedir}" 
			splitindex="true" 
			use="true" 
			version="true">
		</javadoc>
	</target>

</project>
